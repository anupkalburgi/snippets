"""
Name node and data node
name node is like is like the brains , maintains where the files are 
how many copies are, and where they are located, 

when as client wants to write a files. this is the first place that gets contacted, 
and that checks for things file name collisions and such

data node is the place where the data is actually stored, and maintains places to update and stuff
there is co-ordinator which sets up the pipelines, and that makes sure we have copied tries failed or 
unacked data writes 
administration

accumulate
appropriate   

important never is urgent
# TODO
important stuff is always planned for, :: and that is in future, and we need to keep a measure of how far we are there 
we have to create a sense of urgency, and that is how we can potentially

make important stuff measurable,


-----

intrepid - fearless adventure, but often in a humorous ways 

colleague
    """
# TODO
import collections
def time_taken(head_id, managers, inform_time):
#    subordinates = {} # manger -> direct reports , 
    # we will have to use augmented bfs
    # that means we will have to carry the time take to communicate till that point of time,
    # we start form the head, and at each subordinate the minimum time needed is the slowest one i.e the maximum time
    subordinates = collections.defaultdict(list)

    for (emp, manager) in enumerate(managers):
        subordinates[manager].append(emp)
    time_taken = 0
    queue = [(head_id, time_taken)]

    max_time = 0

    while queue:
        # we don't have to do a level by level traversal
        (mng , time_taken_till) = queue.pop(0)
        for sub in subordinates[mng]:
            # we are maintaining a visited array as will not revisit the node again
            time_needed = max(time_taken_till, inform_time[mng]+time_taken_till)
            queue.append((sub, time_needed))
            max_time = max(time_needed, max_time)
    
    return max_time

print(time_taken(6, [1,2,3,4,5,6,-1], [0,6,5,4,3,2,1] ))
